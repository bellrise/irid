file:
    | ( statement )+

statement:
    | var-decl ';'
    | func-decl ';'
    | type-decl
    | func-def

type-decl:
    | 'type' symbol '{' type-body '}'

func-decl:
    | 'func' symbol '(' [ func-params ] ')' [ '->' type ] [ func-attrs ]

func-params:
    | func-param ( ',' type-param )*

func-param:
    | type symbol

func-attrs:
    | '[' attr ( ',' attr )* ']'

func-def:
    | func-decl '{' func-body '}'

type:
    | symbol [ '&' ]

type-body:
    | ( type symbol ';' )*

func-body:
    | ( ( var-decl | expr | assign | return ) ';' | ( for-loop | if-else ))*

var-decl:
    | 'let' type symbol

expr:
    | '(' ( expr | assign | math-op ) ')'
    | expr '(' [ expr ( ',' expr )* ] ')'
    | expr '[' expr ']'
    | expr '.' symbol
    | '[' type expr ']'
    | '&' symbol
    | symbol
    | literal

return:
    | 'return' [ expr ]

math-op:
    | expr ( '+' | '-' | '*' | '/' | '%' ) expr
    | expr ( '==' | '!=' ) expr

assign:
    | expr '=' expr

if-else:
    | 'if' '(' expr ')' '{' func-body '}' [ 'else' '{ func-body '}' ]

for-loop:
    | 'for' '(' symbol ',' expr ',' expr ')' '{' func-body '}'

literal:
    | NUMBER
    | "'" CHARACTER "'"
    | '"' ( CHARACTER )* '"'

symbol:
    | ( CHARACTER )+
